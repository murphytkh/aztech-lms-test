TODO:

aws login:
sanjay.das@aztech.com
P@ss2020

putty:
cd ../..etc/mosquitto
mosquitto -d -v -c mosquittows.conf

change format for payloads and test with broker

do GET for configs
So web will send a get request, server will respond with 
get_ack, with the values requested

cpu overheating issue??????

====================================================
                   PAYLOAD STUFF
====================================================
what in the fucks going on
====================================================

====================================================
                     FRONT END
====================================================
current task:
- figure out solution for showing blocks
  - fuck filtering the view for now
- toggle on/off/normal
- remove lights
- move to light function
- clean up code (a lot of repetition)

list of npm packages installed (other than the
usual react stuff)
- moment
- react-calendar
- react-circular-input
- react-router-dom
- recharts
- react-helmet
- paho-mqtt
- three
- @react-three/fiber
- axios

- don't let calendar card make any changes for now
  - radio buttons will do nothing

- schedule data format (for each light)
  - array of size 12 (4 for each schedule type)
      photosensor
    - start time (string)
    - end time (string)
    - days active (array of bools)
    - active/inactive (bool)
      full brightness
    - start time (string)
    - end time (string)
    - days active (array of bools)
    - active/inactive (bool)
      motion
    - start time (string)
    - end time (string)
    - days active (array of bools)
    - active/inactive (bool)

three scene stuff
- controls
  - LMB - pan
  - scroll - zoom
  - RMB - rotate
  - 1 - c1basement1
  - 2 - c1basement2
  - s - save scene to json
- sphere props used
  - radius
  - colour
- plane props used
  - width
  - height
- data structures for objects can be found
  in Utility.js


useful code fragments:

scrollable dropdownbox:
ul.dropdown-menu 
{
    max-height: 500px;
    overflow-y: scroll;
}

updating state array:
function relocate(name, location)
{
    let updatedArray = viewData.map(light =>
        {
            if (light.name === name)
                return {...light, location: location};
                
            return light;
        });
    setViewData(updatedArray);
}

allow state usage in DOM event handlers:
function useRefState(initial)
{
    const [state, setState] = useState(initial);
    const ref = useRef(state);

    const setRefState = val =>
    {
        ref.current = val;
        setState(val);
    };

    return [ref.current, setRefState];
}

fetch from http server using axios
axios.get("http://10.1.11.181:8080/resources/c1basement1.png")
    // get response
    .then(function (response) {
        img = response.data;
        console.log(img);
    })
    // error catching
    .catch(function (error) {
        console.log(error);
    })
    // always called
    .then(function () {
      
    });

this works but its so hacky lol
setLightData(x => {
    console.log(x);
    return x;
})

missing assets:
user dropdown hover icons
====================================================

running steps:
npm start in aztech-lms
npm run deploy for production build
http-server -p 8080 --cors -c10 in http-server folder